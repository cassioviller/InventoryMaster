Olá Replit,

Recebi um conjunto de arquivos de uma aplicação funcional que foi implantada com sucesso no EasyPanel. A análise comparativa desses arquivos com os do projeto `InventoryMaster` revelou diferenças cruciais na forma como as variáveis de ambiente são tratadas, especialmente a `DATABASE_URL`.

**Análise Comparativa e Descobertas:**

O principal problema no `InventoryMaster` parece ser a forma como a `DATABASE_URL` é definida e protegida contra sobrescrições indesejadas por outras variáveis de ambiente (como `PGDATABASE`, `PGUSER`, etc.) que o EasyPanel pode injetar. A aplicação funcional que você forneceu tem uma abordagem mais robusta para isso.

**Diferenças Chave Encontradas na Aplicação Funcional:**

1.  **Dockerfile:**
    *   **InventoryMaster (Atual):**
        ```dockerfile
        # ...
        # Valores padrão para variáveis de ambiente
        ENV NODE_ENV=${NODE_ENV:-production}
        ENV PORT=${PORT:-5013}

        # Script para construir DATABASE_URL automaticamente
        COPY build-database-url.sh /usr/local/bin/
        RUN chmod +x /usr/local/bin/build-database-url.sh
        # ...
        ```
    *   **Aplicação Funcional (Sugestão de Mudança):**
        ```dockerfile
        # ...
        # Valores padrão para variáveis de ambiente
        ENV DATABASE_URL=${DATABASE_URL:-postgres://comissoes_user:senha123forte@estruturas_comissoes:5432/comissoes?sslmode=disable}
        ENV NODE_ENV=${NODE_ENV:-production}
        ENV PORT=${PORT:-5000}
        # ...
        ```
        *   **Observação:** A aplicação funcional define a `DATABASE_URL` diretamente no Dockerfile como uma variável de ambiente com um valor padrão. Isso garante que a `DATABASE_URL` esteja sempre presente no ambiente do contêiner, mesmo que não seja explicitamente definida externamente. O `InventoryMaster` confia em um script `build-database-url.sh` e na lógica do `docker-entrypoint.sh` para construir a `DATABASE_URL`, o que pode ser mais propenso a erros de sobrescrição.

2.  **`docker-entrypoint.sh`:**
    *   **InventoryMaster (Atual):** O script tenta construir a `DATABASE_URL` se ela não estiver definida e, em uma versão anterior, eu sugeri adicionar `unset` para variáveis `PG*`. No entanto, a lógica de construção ainda pode ser suscetível a variáveis parciais injetadas pelo EasyPanel.
    *   **Aplicação Funcional (Sugestão de Mudança):**
        ```bash
        #!/bin/bash

        # Configuração do ambiente
        export NODE_ENV=${NODE_ENV:-production}
        export PORT=${PORT:-5000}

        echo "=== Iniciando aplicação em modo: $NODE_ENV ==="

        # Verifica se DATABASE_URL está definido
        if [ -z "$DATABASE_URL" ]; then
          echo "ERRO: Variável DATABASE_URL não está definida!"
          exit 1
        fi

        # Tenta extrair informações de conexão do DATABASE_URL
        # ... (lógica para extrair PGDATABASE, PGUSER, etc. do DATABASE_URL)

        # Verifica se o banco de dados está acessível (usando pg_isready ou curl)
        # ... (lógica de loop de tentativas)

        echo "Banco de dados conectado com sucesso!"

        # Executa migrações do banco de dados
        echo "Executando migrações do banco de dados..."
        npm run db:push

        # Inicia a aplicação
        echo "Iniciando aplicação..."
        exec "$@"
        ```
        *   **Observação:** O script da aplicação funcional *não* tenta construir a `DATABASE_URL` se ela não estiver definida. Em vez disso, ele *exige* que ela esteja definida e sai com erro caso contrário. Além disso, ele *extrai* as informações de conexão (PGHOST, PGPORT, PGUSER) *da* `DATABASE_URL` já definida, o que é uma abordagem muito mais segura e evita que variáveis parciais do EasyPanel causem conflito. A lógica de `pg_isready` também é mais robusta.

3.  **Arquivos `.env`:**
    *   A aplicação funcional utiliza `.env`, `.env.example` e `.env.local` de forma consistente, com a `DATABASE_URL` completa e correta em todos eles.

**Recomendação e Solicitação ao Replit:**

Com base nesta análise, a solução mais robusta para o `InventoryMaster` é alinhar a estratégia de gerenciamento da `DATABASE_URL` com a da aplicação funcional. Peço que você implemente as seguintes mudanças:

1.  **Modificar o `Dockerfile` do `InventoryMaster`:**
    *   Remova a linha `COPY build-database-url.sh /usr/local/bin/` e `RUN chmod +x /usr/local/bin/build-database-url.sh`.
    *   Adicione a definição da `DATABASE_URL` como uma variável de ambiente com um valor padrão no Dockerfile, similar à aplicação funcional. Por exemplo:
        ```dockerfile
        ENV DATABASE_URL=${DATABASE_URL:-postgres://axiom:estruturas@viajey_cassio:5432/almoxarifado?sslmode=disable}
        ```
        *   **Importante:** Use a `DATABASE_URL` correta para o ambiente de produção do `InventoryMaster` (com `almoxarifado` ou `axiom`, dependendo do que você deseja que seja o nome final do banco de dados).

2.  **Modificar o `docker-entrypoint.sh` do `InventoryMaster`:**
    *   Altere o script para que ele *exija* que a `DATABASE_URL` esteja definida (como no script funcional), em vez de tentar construí-la se não estiver.
    *   Implemente a lógica de extração de `PGHOST`, `PGPORT`, `PGUSER` *da* `DATABASE_URL` já definida, em vez de depender de variáveis de ambiente separadas para esses componentes.
    *   Remova qualquer lógica de `unset` para variáveis `PG*` ou `POSTGRES_*`, pois a nova abordagem de extração da `DATABASE_URL` já lida com isso.
    *   Incorpore a lógica de `pg_isready` ou `curl` para verificar a conexão com o banco de dados, conforme a aplicação funcional.

3.  **Verificar e Padronizar Arquivos `.env`:**
    *   Garanta que os arquivos `.env`, `.env.example` e `.env.local` no projeto `InventoryMaster` contenham a `DATABASE_URL` completa e correta para cada ambiente, similar à aplicação funcional.

4.  **Re-deploy Completo:**
    *   Após todas as modificações, execute um **re-deploy completo** da aplicação no EasyPanel.

Esta abordagem deve resolver o problema de forma definitiva, garantindo que a `DATABASE_URL` seja a fonte primária e consistente para a conexão com o banco de dados, e que a aplicação não seja mais confundida por variáveis de ambiente parciais ou incorretas injetadas pelo EasyPanel.

Obrigado pela sua colaboração contínua. Tenho certeza de que esta solução será bem-sucedida!

