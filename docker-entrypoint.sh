#!/bin/bash
set -e

echo "üöÄ Iniciando Sistema de Gerenciamento de Almoxarifado..."

# Fun√ß√£o para aguardar o banco de dados estar dispon√≠vel
wait_for_db() {
  echo "‚è≥ Aguardando banco de dados estar dispon√≠vel..."
  
  # Verificar se DATABASE_URL est√° definida
  if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL n√£o est√° definida!"
    exit 1
  fi
  
  # Extrair componentes da DATABASE_URL usando regex mais robusto
  DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
  DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
  DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')
  DB_USER=$(echo $DATABASE_URL | sed -n 's/.*\/\/\([^:]*\):.*/\1/p')
  DB_PASS=$(echo $DATABASE_URL | sed -n 's/.*\/\/[^:]*:\([^@]*\)@.*/\1/p')

  echo "Conectando em: $DB_HOST:$DB_PORT -> $DB_NAME (usu√°rio: $DB_USER)"

  # Aguardar at√© que o PostgreSQL esteja dispon√≠vel
  max_attempts=30
  attempt=1
  
  until PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c '\q' 2>/dev/null; do
    if [ $attempt -ge $max_attempts ]; then
      echo "‚ùå Falha ao conectar com PostgreSQL ap√≥s $max_attempts tentativas"
      echo "Verificar se o banco de dados est√° funcionando e as credenciais est√£o corretas"
      exit 1
    fi
    
    echo "PostgreSQL n√£o dispon√≠vel (tentativa $attempt/$max_attempts) - aguardando..."
    sleep 3
    attempt=$((attempt + 1))
  done

  echo "‚úÖ PostgreSQL est√° dispon√≠vel!"
}

# Executar migra√ß√£o/sincroniza√ß√£o do banco de dados
run_db_migration() {
  echo "üîÑ Executando migra√ß√£o do banco de dados..."
  
  # Usar o comando drizzle para sincronizar o schema
  npm run db:push
  
  echo "‚úÖ Migra√ß√£o do banco de dados conclu√≠da!"
}

# Aguardar banco de dados
wait_for_db

# Executar migra√ß√£o
run_db_migration

echo "üéâ Inicializa√ß√£o conclu√≠da! Iniciando aplica√ß√£o..."

# Executar o comando passado como argumentos
exec "$@"