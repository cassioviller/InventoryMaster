#!/bin/bash
set -e

echo "üöÄ Iniciando Sistema de Gerenciamento de Almoxarifado..."

# Fun√ß√£o para aguardar o banco de dados estar dispon√≠vel
wait_for_db() {
  echo "‚è≥ Aguardando banco de dados estar dispon√≠vel..."
  
  # Extrair componentes da DATABASE_URL
  DB_HOST=$(echo $DATABASE_URL | sed 's/.*@\([^:]*\).*/\1/')
  DB_PORT=$(echo $DATABASE_URL | sed 's/.*:\([0-9]*\)\/.*/\1/')
  DB_NAME=$(echo $DATABASE_URL | sed 's/.*\/\([^?]*\).*/\1/')
  DB_USER=$(echo $DATABASE_URL | sed 's/.*\/\/\([^:]*\):.*/\1/')
  DB_PASS=$(echo $DATABASE_URL | sed 's/.*\/\/[^:]*:\([^@]*\)@.*/\1/')

  # Aguardar at√© que o PostgreSQL esteja dispon√≠vel
  until PGPASSWORD=$DB_PASS psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c '\q'; do
    echo "PostgreSQL ainda n√£o est√° dispon√≠vel - aguardando..."
    sleep 2
  done

  echo "‚úÖ PostgreSQL est√° dispon√≠vel!"
}

# Executar migra√ß√£o/sincroniza√ß√£o do banco de dados
run_db_migration() {
  echo "üîÑ Executando migra√ß√£o do banco de dados..."
  
  # Usar o comando drizzle para sincronizar o schema
  npm run db:push
  
  echo "‚úÖ Migra√ß√£o do banco de dados conclu√≠da!"
}

# Aguardar banco de dados
wait_for_db

# Executar migra√ß√£o
run_db_migration

echo "üéâ Inicializa√ß√£o conclu√≠da! Iniciando aplica√ß√£o..."

# Executar o comando passado como argumentos
exec "$@"