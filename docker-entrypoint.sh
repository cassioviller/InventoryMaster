#!/bin/bash
set -e

echo ">>> Iniciando script de entrada do Sistema de Almoxarifado <<<"

# 1. Validar Vari√°veis de Ambiente Essenciais
: "${DATABASE_URL:?Vari√°vel DATABASE_URL n√£o est√° configurada. Verifique as vari√°veis secretas do EasyPanel.}"
: "${NODE_ENV:?Vari√°vel NODE_ENV n√£o est√° configurada}"
: "${PORT:?Vari√°vel PORT n√£o est√° configurada}"

echo "üîß Configurando conex√£o PostgreSQL..."

# 2. Desdefinir vari√°veis PG* para evitar conflitos com DATABASE_URL
# CR√çTICO: O EasyPanel pode injetar vari√°veis PG* que conflitam com DATABASE_URL
unset PGDATABASE
unset PGUSER  
unset PGPASSWORD
unset PGHOST
unset PGPORT
unset POSTGRES_DB
unset POSTGRES_USER
unset POSTGRES_PASSWORD
unset POSTGRES_HOST
unset POSTGRES_PORT

echo "üîß Vari√°veis PG* removidas para evitar conflitos"

# 3. Extrair componentes da DATABASE_URL para pg_isready
PGHOST=$(echo $DATABASE_URL | sed -E 's/^.*@([^:]+):.*/\1/' 2>/dev/null || echo "localhost")
PGPORT=$(echo $DATABASE_URL | sed -E 's/^.*:([0-9]+).*/\1/' 2>/dev/null || echo "5432")
PGUSER=$(echo $DATABASE_URL | sed -E 's/^.*:\/\/([^:]+):.*/\1/' 2>/dev/null || echo "postgres")

echo "üîß Par√¢metros extra√≠dos - Host: $PGHOST, Port: $PGPORT, User: $PGUSER"

# 4. Aguardar o Banco de Dados Estar Pronto
echo "Aguardando inicializa√ß√£o do PostgreSQL..."
MAX_ATTEMPTS=30
ATTEMPTS=0

check_db_connection() {
  pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" > /dev/null 2>&1
  return $?
}

while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
  if check_db_connection; then
    echo "‚úÖ PostgreSQL est√° pronto!"
    break
  fi
  ATTEMPTS=$((ATTEMPTS+1))
  echo "PostgreSQL n√£o est√° pronto ainda - tentativa $ATTEMPTS de $MAX_ATTEMPTS - esperando..."
  sleep 2
done

if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
  echo "‚ùå N√£o foi poss√≠vel conectar ao PostgreSQL ap√≥s $MAX_ATTEMPTS tentativas"
  echo "Verifique a conex√£o e a DATABASE_URL"
  exit 1
fi

echo "‚úÖ Banco de dados conectado com sucesso!"

# 5. Executar Migra√ß√µes e Corre√ß√µes do Schema
echo "üîß Verificando se as tabelas do banco de dados existem..."

# Verificar se as tabelas principais existem
if psql "$DATABASE_URL" -c "SELECT to_regclass('public.users');" | grep -q "users"; then
  echo "‚úÖ Tabela 'users' j√° existe"
  
  # Verificar especificamente se cost_centers existe (funcionalidade cr√≠tica)
  if psql "$DATABASE_URL" -c "SELECT to_regclass('public.cost_centers');" | grep -q "cost_centers"; then
    echo "‚úÖ Tabela 'cost_centers' j√° existe"
  else
    echo "‚ö†Ô∏è  Tabela 'cost_centers' n√£o existe - executando corre√ß√£o do schema..."
    # Executar script de corre√ß√£o do schema de produ√ß√£o
    if [ -f "fix-production-schema.js" ]; then
      echo "üîß Executando fix-production-schema.js..."
      NODE_ENV=production node fix-production-schema.js
    else
      echo "‚ùå Script fix-production-schema.js n√£o encontrado - executando migra√ß√£o padr√£o"
      NODE_ENV=production npm run db:push
    fi
  fi
  
  # Verificar se material_movements tem cost_center_id (corre√ß√£o snake_case)
  if psql "$DATABASE_URL" -c "\d material_movements" | grep -q "cost_center_id"; then
    echo "‚úÖ Coluna 'cost_center_id' j√° existe em material_movements"
  else
    echo "‚ö†Ô∏è  Coluna 'cost_center_id' n√£o existe - executando corre√ß√£o do schema..."
    if [ -f "fix-production-schema.js" ]; then
      echo "üîß Executando fix-production-schema.js para corre√ß√µes de schema..."
      NODE_ENV=production node fix-production-schema.js
    fi
  fi
  
else
  echo "‚ö†Ô∏è  Tabela 'users' n√£o existe. Executando migra√ß√£o inicial..."
  NODE_ENV=production npm run db:push
  
  # Ap√≥s migra√ß√£o inicial, executar corre√ß√£o do schema para garantir compatibilidade
  echo "üîß Executando corre√ß√£o do schema ap√≥s migra√ß√£o inicial..."
  if [ -f "fix-production-schema.js" ]; then
    echo "üîß Aplicando corre√ß√µes espec√≠ficas do schema de produ√ß√£o..."
    NODE_ENV=production node fix-production-schema.js
  fi
fi

echo ">>> Configura√ß√£o do banco de dados conclu√≠da <<<"

# 6. Criar usu√°rios padr√£o se em produ√ß√£o e n√£o existirem
if [ "$NODE_ENV" = "production" ]; then
  echo "üîß Verificando usu√°rios padr√£o em produ√ß√£o..."
  # Verificar se usu√°rio cassio existe
  if psql "$DATABASE_URL" -c "SELECT username FROM users WHERE username='cassio';" | grep -q "cassio"; then
    echo "‚úÖ Usu√°rio cassio j√° existe"
  else
    echo "üîß Criando usu√°rios padr√£o..."
    if [ -f "create-default-users.js" ]; then
      NODE_ENV=production node create-default-users.js
    fi
  fi
fi

# 7. Valida√ß√£o Final do Schema
echo "üîß Valida√ß√£o final do schema..."
SCHEMA_OK=true

# Verificar tabelas cr√≠ticas
for table in users categories materials employees suppliers third_parties material_movements cost_centers audit_logs; do
  if ! psql "$DATABASE_URL" -c "SELECT to_regclass('public.$table');" | grep -q "$table"; then
    echo "‚ùå Tabela '$table' n√£o encontrada"
    SCHEMA_OK=false
  fi
done

# Verificar colunas cr√≠ticas
if ! psql "$DATABASE_URL" -c "\d material_movements" | grep -q "cost_center_id"; then
  echo "‚ùå Coluna 'cost_center_id' n√£o encontrada em material_movements"
  SCHEMA_OK=false
fi

if [ "$SCHEMA_OK" = "true" ]; then
  echo "‚úÖ Schema validado com sucesso!"
else
  echo "‚ùå Schema incompleto - pode haver problemas de funcionamento"
fi

# 8. Iniciar a Aplica√ß√£o
echo "üöÄ Iniciando aplica√ß√£o na porta $PORT..."
echo "‚úÖ Sistema inicializado"

# O 'exec "$@"' garante que o comando CMD do Dockerfile seja executado
exec "$@"