/**
 * Script para validar se o deploy foi bem-sucedido
 * Verifica schema, conectividade e funcionalidades cr√≠ticas
 */

const { Pool } = require('pg');

async function validateDeployment() {
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL n√£o configurada');
    process.exit(1);
  }

  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    const client = await pool.connect();
    console.log('üîß Validando deployment...');

    // 1. Verificar conectividade
    console.log('1Ô∏è‚É£ Testando conectividade...');
    await client.query('SELECT NOW()');
    console.log('‚úÖ Conectividade OK');

    // 2. Verificar tabelas cr√≠ticas
    console.log('2Ô∏è‚É£ Verificando tabelas...');
    const requiredTables = [
      'users', 'categories', 'materials', 'employees', 
      'suppliers', 'third_parties', 'material_movements', 
      'cost_centers', 'audit_logs'
    ];

    for (const table of requiredTables) {
      const result = await client.query(
        `SELECT to_regclass('public.${table}') as exists`
      );
      if (result.rows[0].exists) {
        console.log(`‚úÖ Tabela ${table} existe`);
      } else {
        console.log(`‚ùå Tabela ${table} N√ÉO existe`);
        throw new Error(`Tabela cr√≠tica ${table} n√£o encontrada`);
      }
    }

    // 3. Verificar colunas cr√≠ticas
    console.log('3Ô∏è‚É£ Verificando colunas cr√≠ticas...');
    
    // Verificar cost_center_id em material_movements
    const costCenterColumn = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'material_movements' 
      AND column_name = 'cost_center_id'
    `);
    
    if (costCenterColumn.rows.length > 0) {
      console.log('‚úÖ Coluna cost_center_id existe em material_movements');
    } else {
      console.log('‚ùå Coluna cost_center_id N√ÉO existe em material_movements');
      throw new Error('Schema desatualizado - coluna cost_center_id ausente');
    }

    // 4. Verificar usu√°rios
    console.log('4Ô∏è‚É£ Verificando usu√°rios...');
    const users = await client.query('SELECT COUNT(*) FROM users');
    const userCount = parseInt(users.rows[0].count);
    
    if (userCount > 0) {
      console.log(`‚úÖ ${userCount} usu√°rios encontrados`);
      
      // Verificar usu√°rio cassio
      const cassio = await client.query(
        'SELECT username, role FROM users WHERE username = $1',
        ['cassio']
      );
      
      if (cassio.rows.length > 0) {
        console.log(`‚úÖ Usu√°rio cassio existe com role: ${cassio.rows[0].role}`);
      } else {
        console.log('‚ö†Ô∏è  Usu√°rio cassio n√£o encontrado');
      }
    } else {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado');
    }

    // 5. Verificar centros de custo
    console.log('5Ô∏è‚É£ Verificando centros de custo...');
    const costCenters = await client.query('SELECT COUNT(*) FROM cost_centers');
    const costCenterCount = parseInt(costCenters.rows[0].count);
    
    if (costCenterCount > 0) {
      console.log(`‚úÖ ${costCenterCount} centros de custo encontrados`);
    } else {
      console.log('‚ö†Ô∏è  Nenhum centro de custo encontrado');
    }

    // 6. Verificar foreign keys
    console.log('6Ô∏è‚É£ Verificando foreign keys...');
    const foreignKeys = await client.query(`
      SELECT 
        tc.table_name, 
        kcu.column_name, 
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name 
      FROM 
        information_schema.table_constraints AS tc 
        JOIN information_schema.key_column_usage AS kcu
          ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
          ON ccu.constraint_name = tc.constraint_name
      WHERE constraint_type = 'FOREIGN KEY'
      AND tc.table_name IN ('material_movements', 'materials', 'employees')
    `);
    
    console.log(`‚úÖ ${foreignKeys.rows.length} foreign keys encontradas`);

    // 7. Teste de funcionalidade b√°sica
    console.log('7Ô∏è‚É£ Testando funcionalidades b√°sicas...');
    
    // Testar inser√ß√£o em audit_logs
    await client.query(`
      INSERT INTO audit_logs (user_id, action, table_name, record_id, changes, owner_id)
      VALUES (1, 'VALIDATION', 'deployment', 1, '{"test": true}', 1)
    `);
    console.log('‚úÖ Inser√ß√£o em audit_logs funciona');

    client.release();

    console.log('');
    console.log('üéâ VALIDA√á√ÉO DE DEPLOYMENT CONCLU√çDA COM SUCESSO!');
    console.log('');
    console.log('‚úÖ Todos os componentes cr√≠ticos est√£o funcionando');
    console.log('‚úÖ Schema atualizado e compat√≠vel');
    console.log('‚úÖ Sistema pronto para uso em produ√ß√£o');
    console.log('');
    console.log('üöÄ Pr√≥ximos passos:');
    console.log('1. Testar login via interface web');
    console.log('2. Verificar funcionalidades de centro de custo');
    console.log('3. Testar entradas e sa√≠das de material');

  } catch (error) {
    console.error('‚ùå Valida√ß√£o falhou:', error.message);
    console.error('');
    console.error('üîß Poss√≠veis solu√ß√µes:');
    console.error('1. Executar fix-production-schema.js');
    console.error('2. Verificar vari√°veis de ambiente');
    console.error('3. Reiniciar aplica√ß√£o');
    throw error;
  } finally {
    await pool.end();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  validateDeployment()
    .then(() => {
      console.log('‚úÖ Valida√ß√£o conclu√≠da');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Falha na valida√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { validateDeployment };